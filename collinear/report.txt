See the Assessment Guide for information on how to interpret this report.

Assessment Summary

Compilation:  PASSED
Style:        FAILED
Findbugs:     No potential bugs found.
API:          PASSED

Correctness:  39/41 tests passed
Memory:       1/1 tests passed
Timing:       10/41 tests passed

Aggregate score: 77.93% [Correctness: 65%, Memory: 10%, Timing: 25%, Style: 0%]

Assessment Details

The following files were submitted:
----------------------------------
total 32K
-rw-r--r-- 1 4.2K Nov 13 01:18 BruteCollinearPoints.java
-rw-r--r-- 1 5.0K Nov 13 01:18 FastCollinearPoints.java
-rw-r--r-- 1 4.4K Nov 13 01:18 Point.java
-rw-r--r-- 1 4.1K Nov 13 01:18 studentSubmission.zip


********************************************************************************
*          COMPILING                                                           *
********************************************************************************


% javac Point.java
*-----------------------------------------------------------

================================================================

% javac BruteCollinearPoints.java
*-----------------------------------------------------------

================================================================

% javac FastCollinearPoints.java
*-----------------------------------------------------------
FastCollinearPoints.java:26: warning: [unchecked] unchecked cast
            ArrayList<Point> rest = (ArrayList<Point>) allPoints.clone();
                                                                      ^
  required: ArrayList<Point>
  found:    Object
1 warning

================================================================



% checkstyle *.java
*-----------------------------------------------------------
[ERROR] BruteCollinearPoints.java:39:39: The local variable 'existing_start' must start with a lowercase letter and use camelCase. [LocalVariableName]
[ERROR] BruteCollinearPoints.java:40:39: The local variable 'existing_end' must start with a lowercase letter and use camelCase. [LocalVariableName]
[ERROR] BruteCollinearPoints.java:41:40: The local variable 'existing_slope' must start with a lowercase letter and use camelCase. [LocalVariableName]
[ERROR] BruteCollinearPoints.java:42:40: The local variable 'new_slope' must start with a lowercase letter and use camelCase. [LocalVariableName]
[ERROR] BruteCollinearPoints.java:43:40: The local variable 'test_slope' must start with a lowercase letter and use camelCase. [LocalVariableName]
[ERROR] BruteCollinearPoints.java:44: Line is longer than 128 characters (currently 137). [LineLength]
[ERROR] FastCollinearPoints.java:29:20: The local variable 'last_slope' must start with a lowercase letter and use camelCase. [LocalVariableName]
[ERROR] FastCollinearPoints.java:31:30: The local variable 'segment_points' must start with a lowercase letter and use camelCase. [LocalVariableName]
[ERROR] FastCollinearPoints.java:34:24: The local variable 'current_slope' must start with a lowercase letter and use camelCase. [LocalVariableName]
[ERROR] FastCollinearPoints.java:35: Line is longer than 128 characters (currently 161). [LineLength]
[ERROR] FastCollinearPoints.java:42:31: The local variable 'start_point' must start with a lowercase letter and use camelCase. [LocalVariableName]
[ERROR] FastCollinearPoints.java:43:31: The local variable 'end_point' must start with a lowercase letter and use camelCase. [LocalVariableName]
[ERROR] FastCollinearPoints.java:45:32: The local variable 'new_slope' must start with a lowercase letter and use camelCase. [LocalVariableName]
[ERROR] FastCollinearPoints.java:47: Line is longer than 128 characters (currently 129). [LineLength]
[ERROR] FastCollinearPoints.java:50:34: The local variable 'existing_start' must start with a lowercase letter and use camelCase. [LocalVariableName]
[ERROR] FastCollinearPoints.java:51:34: The local variable 'existing_end' must start with a lowercase letter and use camelCase. [LocalVariableName]
[ERROR] FastCollinearPoints.java:52:35: The local variable 'existing_slope' must start with a lowercase letter and use camelCase. [LocalVariableName]
[ERROR] FastCollinearPoints.java:53:35: The local variable 'test_slope' must start with a lowercase letter and use camelCase. [LocalVariableName]
[ERROR] FastCollinearPoints.java:55: Line is longer than 128 characters (currently 140). [LineLength]
[ERROR] FastCollinearPoints.java:56: Line is longer than 128 characters (currently 132). [LineLength]
Checkstyle ends with 20 errors.

================================================================


% findbugs *.class
*-----------------------------------------------------------

================================================================


Testing the APIs of your programs.
*-----------------------------------------------------------
Point:

BruteCollinearPoints:

FastCollinearPoints:

================================================================


******************************************************************************
*          CORRECTNESS
******************************************************************************

Testing methods in Point
*-----------------------------------------------------------
Running 3 total tests.

Test 1: p.slopeTo(q)
  *  positive infinite slope, where p and q have coordinates in [0, 500)
  *  positive infinite slope, where p and q have coordinates in [0, 32768)
  *  negative infinite slope, where p and q have coordinates in [0, 500)
  *  negative infinite slope, where p and q have coordinates in [0, 32768)
  *  positive zero     slope, where p and q have coordinates in [0, 500)
  *  positive zero     slope, where p and q have coordinates in [0, 32768)
  *  symmetric  for random points p and q with coordinates in [0, 500)
  *  symmetric  for random points p and q with coordinates in [0, 32768)
  *  transitive for random points p, q, and r with coordinates in [0, 500)
  *  transitive for random points p, q, and r with coordinates in [0, 32768)
  *  slopeTo(), where p and q have coordinates in [0, 500)
  *  slopeTo(), where p and q have coordinates in [0, 32768)
  *  slopeTo(), where p and q have coordinates in [0, 10)
  *  throw a java.lang.NullPointerException if argument is null
==> passed

Test 2: p.compareTo(q)
  *  reflexive, where p and q have coordinates in [0, 500)
  *  reflexive, where p and q have coordinates in [0, 32768)
  *  antisymmetric, where p and q have coordinates in [0, 500)
  *  antisymmetric, where p and q have coordinates in [0, 32768)
  *  transitive, where p, q, and r have coordinates in [0, 500)
  *  transitive, where p, q, and r have coordinates in [0, 32768)
  *  sign of compareTo(), where p and q have coordinates in [0, 500)
  *  sign of compareTo(), where p and q have coordinates in [0, 32768)
  *  sign of compareTo(), where p and q have coordinates in [0, 10)
  *  throw java.lang.NullPointerException exception if argument is null
==> passed

Test 3: p.slopeOrder().compare(q, r)
  *  reflexive, where p and q have coordinates in [0, 500)
  *  reflexive, where p and q have coordinates in [0, 32768)
  *  antisymmetric, where p, q, and r have coordinates in [0, 500)
  *  antisymmetric, where p, q, and r have coordinates in [0, 32768)
  *  transitive, where p, q, r, and s have coordinates in [0, 500)
  *  transitive, where p, q, r, and s have coordinates in [0, 32768)
  *  sign of compare(), where p, q, and r have coordinates in [0, 500)
  *  sign of compare(), where p, q, and r have coordinates in [0, 32768)
  *  sign of compare(), where p, q, and r have coordinates in [0, 10)
  *  throw java.lang.NullPointerException if either argument is null
==> passed


Total: 3/3 tests passed!


================================================================

******************************************************************************
*          correctness (using reference Point.java and LineSegment.java)
******************************************************************************

Testing methods in BruteCollinearPoints
*-----------------------------------------------------------
Running 17 total tests.

The inputs satisfy the following conditions:
  - no duplicate points
  - no 5 (or more) points are collinear
  - all x- and y-coordinates between 0 and 32,767

Test 1: Points from a file
  *  filename = input8.txt
  *  filename = equidistant.txt
  *  filename = input40.txt
  *  filename = input48.txt
==> passed

Test 2a: Points from a file with horizontal line segments
  *  filename = horizontal5.txt
  *  filename = horizontal25.txt
==> passed

Test 2b: Random horizontal line segments
  *   1 random horizontal line segment
  *   5 random horizontal line segments
  *  10 random horizontal line segments
  *  15 random horizontal line segments
==> passed

Test 3a: Points from a file with vertical line segments
  *  filename = vertical5.txt
  *  filename = vertical25.txt
==> passed

Test 3b: Random vertical line segments
  *   1 random vertical line segment
  *   5 random vertical line segments
  *  10 random vertical line segments
  *  15 random vertical line segments
==> passed

Test 4a: Points from a file with no line segments
  *  filename = random23.txt
  *  filename = random38.txt
==> passed

Test 4b: Random points with no line segments
  *   5 random points
  *  10 random points
  *  20 random points
  *  50 random points
==> passed

Test 5: Points from a file with fewer than 4 points
  *  filename = input1.txt
  *  filename = input2.txt
  *  filename = input3.txt
==> passed

Test 6: Check for dependence on either compareTo() or compare()
        returning { -1, +1, 0 } instead of { negative integer,
        positive integer, zero }
  *  filename = equidistant.txt
  *  filename = input40.txt
  *  filename = input48.txt
==> passed

Test 7: Check for fragile dependence on return value of toString()
  *  filename = equidistant.txt
  *  filename = input40.txt
  *  filename = input48.txt
==> passed

Test 8: Random line segments, none vertical or horizontal
  *   1 random line segment
  *   5 random line segments
  *  10 random line segments
  *  15 random line segments
==> passed

Test 9: Random line segments
  *   1 random line segment
  *   5 random line segments
  *  10 random line segments
  *  15 random line segments
==> passed

Test 10: Check that data type is immutable by testing whether each method
        returns the same value, regardless of any intervening operations
  *  input8.txt
  *  equidistant.txt
==> passed

Test 11: Check that data type does not mutate the constructor argument
  *  input8.txt
  *  equidistant.txt
==> passed

Test 12: numberOfSegments() is consistent with segments()
  *  filename = input8.txt
  *  filename = equidistant.txt
  *  filename = input40.txt
  *  filename = input48.txt
  *  filename = horizontal5.txt
  *  filename = vertical5.txt
  *  filename = random23.txt
==> passed

Test 13: Throws exception either if argument to constructor is null
         or if any entry in array is null
  *  argument is null
  *  Point[] of length 10, number of null entries = 1
  *  Point[] of length 10, number of null entries = 10
  *  Point[] of length 4, number of null entries = 1
  *  Point[] of length 3, number of null entries = 1
  *  Point[] of length 2, number of null entries = 1
  *  Point[] of length 1, number of null entries = 1
==> passed

Test 14: Check that the constructor throws an exception if duplicate points
  *  50 points
  *  25 points
  *  5 points
  *  4 points
  *  3 points
  *  2 points
==> passed


Total: 17/17 tests passed!


================================================================

Testing methods in FastCollinearPoints
*-----------------------------------------------------------
Running 21 total tests.

The inputs satisfy the following conditions:
  - no duplicate points
  - all x- and y-coordinates between 0 and 32,767

Test 1: Points from a file
  *  filename = input8.txt
  *  filename = equidistant.txt
  *  filename = input40.txt
  *  filename = input48.txt
  *  filename = input299.txt
==> passed

Test 2a: Points from a file with horizontal line segments
  *  filename = horizontal5.txt
  *  filename = horizontal25.txt
  *  filename = horizontal50.txt
  *  filename = horizontal75.txt
  *  filename = horizontal100.txt
==> passed

Test 2b: Random horizontal line segments
  *   1 random horizontal line segment
  *   5 random horizontal line segments
  *  10 random horizontal line segments
  *  15 random horizontal line segments
==> passed

Test 3a: Points from a file with vertical line segments
  *  filename = vertical5.txt
  *  filename = vertical25.txt
  *  filename = vertical50.txt
  *  filename = vertical75.txt
  *  filename = vertical100.txt
==> passed

Test 3b: Random vertical line segments
  *   1 random vertical line segment
  *   5 random vertical line segments
  *  10 random vertical line segments
  *  15 random vertical line segments
==> passed

Test 4a: Points from a file with no line segments
  *  filename = random23.txt
  *  filename = random38.txt
  *  filename = random91.txt
  *  filename = random152.txt
==> passed

Test 4b: Random points with no line segments
  *   5 random points
  *  10 random points
  *  20 random points
  *  50 random points
==> passed

Test 5a: Points from a file with 5 or more on some line segments
  *  filename = input9.txt
  *  filename = input10.txt
  *  filename = input20.txt
  *  filename = input50.txt
  *  filename = input80.txt
  *  filename = input300.txt
  *  filename = inarow.txt
==> passed

Test 5b: Points from a file with 5 or more on some line segments
  *  filename = kw1260.txt
  *  filename = rs1423.txt
==> passed

Test 6: Points from a file with fewer than 4 points
  *  filename = input1.txt
  *  filename = input2.txt
  *  filename = input3.txt
==> passed

Test 7: Check for dependence on either compareTo() or compare()
        returning { -1, +1, 0 } instead of { negative integer,
        positive integer, zero }
  *  filename = equidistant.txt
  *  filename = input40.txt
  *  filename = input48.txt
  *  filename = input299.txt
==> passed

Test 8: Check for fragile dependence on return value of toString()
  *  filename = equidistant.txt
  *  filename = input40.txt
  *  filename = input48.txt
==> passed

Test 9: Random line segments, none vertical or horizontal
  *   1 random line segment
  *   5 random line segments
  *  25 random line segments
  *  50 random line segments
  *  100 random line segments
==> passed

Test 10: Random line segments
  *   1 random line segment
  *   5 random line segments
  *  25 random line segments
  *  50 random line segments
  *  100 random line segments
==> passed

Test 11: Random distinct points in a given range
  *  5 random points in a 10-by-10 grid
     -  student   solution has 1 non-null entries
     -  reference solution has 0 non-null entries
     -  1 extra entry in student solution: (1, 0) -> (7, 0)

     -  failed on trial 9 of 500
     5
         7     0
         8     6
         9     6
         1     0
         6     0

  *  10 random points in a 10-by-10 grid
     -  student   solution has 1 non-null entries
     -  reference solution has 0 non-null entries
     -  1 extra entry in student solution: (0, 0) -> (5, 0)

     -  failed on trial 21 of 500
     10
         4     3
         1     1
         6     3
         3     0
         3     3
         0     2
         2     4
         4     7
         5     0
         0     0

  *  50 random points in a 10-by-10 grid
     -  student   solution has 46 non-null entries
     -  reference solution has 45 non-null entries
     -  1 extra entry in student solution: (0, 0) -> (3, 0)

     -  failed on trial 1 of 100

  *  90 random points in a 10-by-10 grid
  *  200 random points in a 50-by-50 grid
==> FAILED

Test 12: M*N points on an M-by-N grid
  *  3-by-3 grid
     -  student   solution has 2 non-null entries
     -  reference solution has 0 non-null entries
     -  2 extra entries in student solution, including: (0, 2) -> (2, 2)

  *  4-by-4 grid
  *  5-by-5 grid
  *  10-by-10 grid
  *  20-by-20 grid
  *  5-by-4 grid
  *  6-by-4 grid
  *  10-by-4 grid
  *  15-by-4 grid
  *  25-by-4 grid
==> FAILED

Test 13: Check that data type is immutable by testing whether each method
         returns the same value, regardless of any intervening operations
  *  input8.txt
  *  equidistant.txt
==> passed

Test 14: Check that data type does not mutate the constructor argument
  *  input8.txt
  *  equidistant.txt
==> passed

Test 15: numberOfSegments() is consistent with segments()
  *  filename = input8.txt
  *  filename = equidistant.txt
  *  filename = input40.txt
  *  filename = input48.txt
  *  filename = horizontal5.txt
  *  filename = vertical5.txt
  *  filename = random23.txt
==> passed

Test 16: Throws exception either if argument to constructor is null
         or if any entry in array is null
  *  argument is null
  *  Point[] of length 10, number of null entries = 1
  *  Point[] of length 10, number of null entries = 10
  *  Point[] of length 4, number of null entries = 1
  *  Point[] of length 3, number of null entries = 1
  *  Point[] of length 2, number of null entries = 1
  *  Point[] of length 1, number of null entries = 1
==> passed

Test 17: Check that the constructor throws an exception if duplicate points
  *  50 points
  *  25 points
  *  5 points
  *  4 points
  *  3 points
  *  2 points
==> passed


Total: 19/21 tests passed!


================================================================

******************************************************************************
*          MEMORY
******************************************************************************

Computing memory of Point
*-----------------------------------------------------------
Running 1 total tests.

The maximum amount of memory per Point object is 32 bytes.

Student memory = 24 bytes (passed)

Total: 1/1 tests passed!

================================================================



******************************************************************************
*          TIMING
******************************************************************************

Timing BruteCollinearPoints
*-----------------------------------------------------------
Running 10 total tests.

Test 1a-1e: Find collinear points among N random distinct points


                                                      slopeTo()
             N    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=> passed    16   0.01        3640           0           3640                   45
=> passed    32   0.01       71920           0          71920                  120
=> passed    64   0.03     1270752           0        1270752                  308
=> passed   128   0.03    21336000           0       21336000                  741
=> passed   256   1.94   349585682           0      349585682                 1733
==> 5/5 tests passed

Test 2a-2e: Find collinear points among N/4 arbitrary line segments


                                                      slopeTo()
             N    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=> passed    16   0.00        3850           0           3850                   47
=> passed    32   0.01       72864           0          72864                  122
=> passed    64   0.03     1274286           0        1274286                  301
=> passed   128   0.14    21350468           0       21350468                  738
=> passed   256   2.17   349644404           0      349644404                 1739
==> 5/5 tests passed

Total: 10/10 tests passed!

================================================================



Timing FastCollinearPoints
*-----------------------------------------------------------
Running 31 total tests.

Test 1a-1g: Find collinear points among N random distinct points


                                                      slopeTo()
             N    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=> passed    64   0.02        4032       18180          40392                  305
=> passed   128   0.01       16256       87947         192150                  726
=> passed   256   0.04       65280      410054         885388                 1731
=> passed   512   0.07      261632     1880569        4022770                 3977
=> passed  1024   0.24     1047552     8474313       17996178                 8973
=> passed  2048   0.91     4192256    37906624       80005504                19989
==> 6/6 tests passed

lg ratio(slopeTo() + 2*compare()) = lg (80005504 / 17996178) = 2.15
=> passed

==> 7/7 tests passed

Test 2a-2g: Find collinear points among the N points on an N-by-1 grid

                                                      slopeTo()
             N    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=> FAILED    64   0.02       15934        3968          23870               508200  (14.3x)
=> FAILED   128   0.02       64638       16128          96894              4129507  (35.6x)
=> FAILED   256   0.21      260350       65024         390398             33294009  (83.0x)
=> FAILED   512   0.90     1044990      261120        1567230            267390838 (182.2x)
=> FAILED  1024   6.75     4187134     1046528        6280190           2143298325 (384.5x)
=> FAILED  2048  60.78    16762878     4190208       25143294          17163111988 (792.1x)
Aborting: time limit of 10 seconds exceeded

Test 3a-3g: Find collinear points among the N points on an N/4-by-4 grid

                                                      slopeTo()
             N    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=> FAILED    64   0.02      187948       16222         220392   (1.2x)       27267
=> FAILED   128   0.07     3086514       58163        3202840   (5.3x)      238650
=> FAILED   256   1.43    50580924      152338       50885600  (23.7x)     1999896   (1.6x)
=> FAILED   512   5.55   821344210      546156      822436522 (101.6x)    16381149   (3.5x)

Total: 0/31 tests passed: Could not complete tests in allotted time, which results in a reported score of 0.
================================================================
